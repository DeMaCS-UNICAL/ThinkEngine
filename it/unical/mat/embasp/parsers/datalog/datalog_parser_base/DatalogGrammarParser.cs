//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\DatalogGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DatalogGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, IDENTIFIER=4, INTEGER=5, STRING=6, WHITESPACE=7;
	public const int
		RULE_output = 0, RULE_predicate_atom = 1, RULE_term = 2;
	public static readonly string[] ruleNames = {
		"output", "predicate_atom", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "IDENTIFIER", "INTEGER", "STRING", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DatalogGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DatalogGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DatalogGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DatalogGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class OutputContext : ParserRuleContext {
		public Predicate_atomContext[] predicate_atom() {
			return GetRuleContexts<Predicate_atomContext>();
		}
		public Predicate_atomContext predicate_atom(int i) {
			return GetRuleContext<Predicate_atomContext>(i);
		}
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogGrammarVisitor<TResult> typedVisitor = visitor as IDatalogGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 0, RULE_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 6; predicate_atom();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predicate_atomContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DatalogGrammarParser.IDENTIFIER, 0); }
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Predicate_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogGrammarVisitor<TResult> typedVisitor = visitor as IDatalogGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predicate_atomContext predicate_atom() {
		Predicate_atomContext _localctx = new Predicate_atomContext(Context, State);
		EnterRule(_localctx, 2, RULE_predicate_atom);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; Match(IDENTIFIER);
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 13; Match(T__0);
				State = 14; term();
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 15; Match(T__1);
					State = 16; term();
					}
					}
					State = 21;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 22; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DatalogGrammarParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER() { return GetToken(DatalogGrammarParser.INTEGER, 0); }
		public ITerminalNode STRING() { return GetToken(DatalogGrammarParser.STRING, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogGrammarVisitor<TResult> typedVisitor = visitor as IDatalogGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 4, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << INTEGER) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '\x1F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\a', '\x2', '\n', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\r', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x14', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x17', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x1B', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', 
		'\x3', '\x3', '\x2', '\x6', '\b', '\x2', '\x1E', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\xE', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\n', '\x5', '\x4', '\x3', '\x2', '\t', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\n', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\t', '\x3', '\x2', '\x2', '\x2', '\v', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x3', '\x3', '\x2', '\x2', '\x2', '\r', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x1A', '\a', '\x6', '\x2', '\x2', '\xF', '\x10', 
		'\a', '\x3', '\x2', '\x2', '\x10', '\x15', '\x5', '\x6', '\x4', '\x2', 
		'\x11', '\x12', '\a', '\x4', '\x2', '\x2', '\x12', '\x14', '\x5', '\x6', 
		'\x4', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x14', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\a', '\x5', '\x2', '\x2', '\x19', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\t', '\x2', '\x2', '\x2', '\x1D', '\a', '\x3', '\x2', '\x2', '\x2', '\x5', 
		'\v', '\x15', '\x1A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
